type Account @entity {
  "The account's address"
  id: ID!

  "Link to creator details if this account is or ever was one"
  creator: Creator @derivedFrom(field: "account")

  "All NFTs currently owned by this account"
  nfts: [Nft!]! @derivedFrom(field: "owner")

  "All NFTs currently owner or listed by this account"
  nftsOwnedOrListed: [Nft!]! @derivedFrom(field: "ownedOrListedBy")

  "All auctions created by this account"
  nftMarketAuctions: [NftMarketAuction!]! @derivedFrom(field: "seller")

  "All bids placed by this account"
  nftBidsPlaced: [NftMarketBid!]! @derivedFrom(field: "bidder")

  "All bids accepted by this account"
  nftBidsAccepted: [NftMarketBid!]! @derivedFrom(field: "seller")

  "NFT transfers from this account to another"
  nftTransfersOut: [NftTransfer!]! @derivedFrom(field: "from")

  "NFT transfers to this account from another"
  nftTransfersIn: [NftTransfer!]! @derivedFrom(field: "to")

  "The total ETH earned by this account, excluding any NFTs minted by this creator"
  netRevenueInETH: BigDecimal!

  "The total ETH earned by this account but still pending finalization, excluding any NFTs minted by this creator"
  netRevenuePendingInETH: BigDecimal!

  "Approvals granted by this account, note this does not include nft.approvedSpender"
  nftAccountApprovals: [NftAccountApproval!]! @derivedFrom(field: "owner")

  "NFT actions initiated by this account"
  nftHistory: [NftHistory!]! @derivedFrom(field: "actorAccount")

  "All Feth entries related to this account."
  feth: [Feth!]! @derivedFrom(field: "user")

  "All offers made by this account"
  nftOffersMade: [NftMarketOffer!]! @derivedFrom(field: "buyer")
}

type Creator @entity {
  "The account's address"
  id: ID!

  "The creator's account information"
  account: Account!

  "All NFTs minted by this creator"
  nfts: [Nft!]! @derivedFrom(field: "creator")

  "The total ETH for sales of NFTs this creator minted"
  netSalesInETH: BigDecimal!

  "The total ETH for sales of NFTs this creator minted but still pending finalization"
  netSalesPendingInETH: BigDecimal!

  "The total ETH earned by this creator"
  netRevenueInETH: BigDecimal!

  "The total ETH earned by this creator but still pending finalization"
  netRevenuePendingInETH: BigDecimal!
}

type NftContract @entity {
  "The contract's address"
  id: ID!

  "The token name"
  name: String

  "The token symbol"
  symbol: String

  "Append baseURI+tokenIPFSPath to get the tokenURI"
  baseURI: String

  "All NFTs minted by this contract"
  nfts: [Nft!]! @derivedFrom(field: "nftContract")
}

type Nft @entity {
  "tokenContractAddress-tokenId"
  id: ID!

  "The token's contract"
  nftContract: NftContract!

  "The tokenId for this specific NFT"
  tokenId: BigInt!

  "The content path for the metadata of this NFT on IPFS"
  tokenIPFSPath: String

  "The creator of this NFT"
  creator: Creator

  "The date/time when this NFT was minted in seconds since Unix epoch"
  dateMinted: BigInt!

  "The transfer details where this NFT was minted"
  mintedTransfer: NftTransfer

  "The current owner of this NFT"
  owner: Account!

  "The current owner or the owner who listed the NFT"
  ownedOrListedBy: Account!

  "An account authorized to transfer this NFT, if one was approved"
  approvedSpender: Account

  "All transfers that have occurred for this NFT"
  transfers: [NftTransfer!] @derivedFrom(field: "nft")

  "All bids ever placed for this NFT"
  bids: [NftMarketBid!]! @derivedFrom(field: "nft")

  "The total ETH for sales of this NFT"
  netSalesInETH: BigDecimal!

  "The total ETH for sales of this NFT but still pending finalization"
  netSalesPendingInETH: BigDecimal!

  "The total ETH earned by the creator from this NFT"
  netRevenueInETH: BigDecimal!

  "The total ETH earned by this creator from this NFT but still pending finalization"
  netRevenuePendingInETH: BigDecimal!

  "True if the NFT has not yet been sold in the Foundation market"
  isFirstSale: Boolean!

  "All auctions which were created for this NFT"
  auctions: [NftMarketAuction!]! @derivedFrom(field: "nft")

  "The current or last previous auction for this NFT"
  mostRecentAuction: NftMarketAuction

  "The current or last auction for this NFT which has not been canceled, if any"
  mostRecentActiveAuction: NftMarketAuction

  "The last auction for this NFT which was finalized, if there was one"
  latestFinalizedAuction: NftMarketAuction

  "The event history for this NFT"
  nftHistory: [NftHistory!]! @derivedFrom(field: "nft")

  "An optional address to receive revenue and creator royalty payments generated by this NFT"
  tokenCreatorPaymentAddress: Bytes

  "A reference to the split details defined by the tokenCreatorPaymentAddress, if that address is a PercentSplit"
  percentSplit: PercentSplit

  "The most recent sale price in the Foundation marketplace, if there has been one"
  lastSalePriceInETH: BigDecimal

  "All offers made for this NFT"
  nftOffers: [NftMarketOffer!]! @derivedFrom(field: "nft")

  "The most recent offer made for this NFT, which may or may not still be valid"
  mostRecentOffer: NftMarketOffer

  "The most recent buy now for this NFT, which may or may not still be valid"
  mostRecentBuyNow: NftMarketBuyNow

  "All buy nows made for this NFT"
  nftBuyNows: [NftMarketBuyNow!]! @derivedFrom(field: "nft")
}

type NftTransfer @entity {
  "tx-logId"
  id: ID!

  "The NFT which was transferred"
  nft: Nft!

  "The source of the transfer, 0 when the token was minted"
  from: Account!

  "The destination of the transfer, 0 when the token is burned"
  to: Account!

  "The date/time of the transfer in seconds since Unix epoch"
  dateTransferred: BigInt!

  "The tx hash where the transfer occurred"
  transactionHash: Bytes!
}

type NftAccountApproval @entity {
  "tokenAddress-owner-spender"
  id: ID!

  "The token's contract"
  nftContract: NftContract!

  "The account which granted this approval"
  owner: Account!

  "The account which is authorized to transfer NFTs held by the owner"
  spender: Account!
}

type NftMarketContract @entity {
  "The contract's address"
  id: ID!

  "How many bids have been placed for any auction on Foundation"
  numberOfBidsPlaced: BigInt!
}

enum NftMarketAuctionStatus {
  "This auction has not been canceled or finalized yet, it may be active or pending finalization"
  Open

  "This auction was canceled before the reserve price was hit"
  Canceled

  "This auction was finalized and the NFT has been transferred to the winner"
  Finalized

  "This auction was invalidated due to another action such as Buy Now"
  Invalidated
}

type NftMarketAuction @entity {
  "marketContractAddress-auctionId"
  id: ID!

  "The contract managing this auction"
  nftMarketContract: NftMarketContract!

  "The id for this auction"
  auctionId: BigInt!

  "The NFT being sold in this auction"
  nft: Nft!

  "The NFT contract for this NFT"
  nftContract: NftContract!

  "The current status of this auction"
  status: NftMarketAuctionStatus!

  "The NFT owner currently offering the NFT for sale"
  seller: Account!

  "The date/time the auction was initially created in seconds since Unix epoch"
  dateCreated: BigInt!

  "The tx hash where this auction was initially created"
  transactionHashCreated: Bytes!

  "The date/time the auction countdown began, only known once reserve price has been met in seconds since Unix epoch"
  dateStarted: BigInt

  "The date/time the auction will be closed, only known once the reserve price has been met in seconds since Unix epoch"
  dateEnding: BigInt

  "The date/time the auction was canceled in seconds since Unix epoch, if applicable"
  dateCanceled: BigInt

  "The reason this auction was canceled, if known"
  canceledReason: String

  "The date/time the auction was finalized in seconds since Unix epoch, if applicable"
  dateFinalized: BigInt

  "The tx hash where this auction was canceled, if applicable"
  transactionHashCanceled: Bytes

  "The initial reserve price which needs to be met in order to begin the auction countdown"
  reservePriceInETH: BigDecimal!

  "The first bid which met the reserve price"
  initialBid: NftMarketBid

  "The current highest bid, if one has been placed"
  highestBid: NftMarketBid

  "All bids placed in this auction"
  bids: [NftMarketBid!]! @derivedFrom(field: "nftMarketAuction")

  "How much the creator earned from this auction, set once there a bid is placed"
  creatorRevenueInETH: BigDecimal

  "How much Foundation earned from this auction, set once there a bid is placed"
  foundationRevenueInETH: BigDecimal

  "How much the owner (if not the creator) earned from this auction, set once there a bid is placed"
  ownerRevenueInETH: BigDecimal

  "How long the auction runs for once the reserve price has been met in seconds"
  duration: BigInt!

  "How long to extend the dateEnding if a bid is placed near the end of the countdown in seconds"
  extensionDuration: BigInt!

  "True if this is the first sale on Foundation and being sold by the creator"
  isPrimarySale: Boolean!

  "How many bids have been placed for any auction on Foundation"
  numberOfBids: BigInt!

  "The volume of ETH bid"
  bidVolumeInETH: BigDecimal!

  "The date/time the auction was invalidated in seconds since Unix epoch, if applicable"
  dateInvalidated: BigInt

  "The tx hash where this auction was invalidated, if applicable"
  transactionHashInvalidated: Bytes
}

enum NftMarketBidStatus {
  "This bid is currently the highest, either on-track to win or has won and is pending finalization"
  Highest

  "This bid was outbid by another user"
  Outbid

  "This bid won the auction and was finalized, completing the NFT transfer"
  FinalizedWinner
}

type NftMarketBid @entity {
  "marketContractAddress-auctionId-txHash-logId"
  id: ID!

  "The auction this bid was for"
  nftMarketAuction: NftMarketAuction!

  "The NFT being sold in this auction"
  nft: Nft!

  "The account which placed the bid"
  bidder: Account!

  "The date/time the bid was placed in seconds since Unix epoch"
  datePlaced: BigInt!

  "The tx hash that placed the bid"
  transactionHashPlaced: Bytes!

  "The size of the bid placed, including fees"
  amountInETH: BigDecimal!

  "The current status of this bid"
  status: NftMarketBidStatus!

  "The date/item when this bid became no longer Active in seconds since Unix epoch, if applicable"
  dateLeftActiveStatus: BigInt

  "The tx hash that moved this bid out of Active status, if applicable"
  transactionHashLeftActiveStatus: Bytes

  "The account which offered this NFT for sale"
  seller: Account!

  "True if this bid caused the end time of an auction to be extended"
  extendedAuction: Boolean!

  "The bid which outbid this one, if applicable"
  outbidByBid: NftMarketBid

  "The bid this one outbid, if applicable"
  bidThisOutbid: NftMarketBid
}

enum Marketplace {
  "Foundation's market contract is the only one supported ATM but more will be added in the future"
  Foundation
}

enum HistoricalEvent {
  "The original mint event for this NFT"
  Minted

  "The NFT has been listed for sale"
  Listed

  "The NFT was unlisted from the market"
  Unlisted

  "The price for this listing has been modified"
  PriceChanged

  "A bid for the NFT has been made"
  Bid

  "The NFT has been sold, this status is not reflected until the auction has been settled"
  Sold

  "The sale has been settled on-chain and the NFT was transferred to the new owner"
  Settled

  "The NFT was transferred from one address to another"
  Transferred

  "The NFT was burned and now no longer available on-chain"
  Burned

  "The creator has been migrated to a new account"
  CreatorMigrated

  "The current owner of this NFT has migrated to a new account"
  OwnerMigrated

  "The seller for the current auction has migrated to a new account"
  SellerMigrated

  "The payment address for this NFT has migrated to a new address"
  CreatorPaymentAddressMigrated

  "The NFT was sold in a private sale"
  PrivateSale

  "The auction was invalidated due to another action such as Buy Now"
  AuctionInvalidated

  "The NFT received an offer"
  OfferMade

  "The latest offer for an NFT was increased"
  OfferChanged

  "The offer for this NFT expired before it was expired, this status is not reflected until another action is performed"
  OfferExpired

  "The offer for this NFT was accepted"
  OfferAccepted

  "The offer for this NFT is no longer valid due to another action such as Buy Now"
  OfferInvalidated

  "The offer for this NFT was canceled"
  OfferCanceled

  "The NFT had a buy now price set"
  BuyPriceSet

  "The buy now for this NFT was accepted"
  BuyPriceAccepted

  "The buy now for this NFT is no longer valid due to another action such as auction kick off"
  BuyPriceInvalidated

  "The buy now for this NFT was canceled"
  BuyPriceCanceled
}

type NftHistory @entity {
  "tx-logId-eventType"
  id: ID!

  "The NFT being sold in this auction"
  nft: Nft!

  "The type of action that this row represents"
  event: HistoricalEvent!

  "The related auction for this change, if applicable"
  auction: NftMarketAuction

  "The related private sale for this change, if applicable"
  privateSale: PrivateSale

  "The related offer for this change, if applicable"
  offer: NftMarketOffer

  "The related buy now for this change, if applicable"
  buyNow: NftMarketBuyNow

  "The contract which processed this event, may be a marketplace or the NFT itself"
  contractAddress: Bytes!

  "The date/time of this event in seconds since Unix epoch"
  date: BigInt!

  "Which market which facilitated this transaction, null when the action was specific to the NFT itself"
  marketplace: Marketplace

  "The transaction hash where this event occurred"
  transactionHash: Bytes!

  "The account associated with this event, if unknown the txOrigin is used. Usually the same as txOrigin but may differ when multisig or other contracts are used"
  actorAccount: Account!

  "The msg.sender for the transaction associated with this event"
  txOrigin: Account!

  "The destination of the NFT for events where the NFT was transferred, null if n/a"
  nftRecipient: Account

  "The value amount associated with this event, in ETH. Null if unknown or n/a"
  amountInETH: BigDecimal

  "The ERC-20 value associated with this event. Null if unknown or ETH was used"
  amountInTokens: BigInt

  "The ERC-20 token address associated with this event. Null if unknown or ETH was used"
  tokenAddress: Bytes
}

type PercentSplitShare @entity {
  "contractAddress-logId"
  id: ID!

  "The split this share is for"
  split: PercentSplit!

  "The recipient included in the split"
  account: Account!

  "The percent share this recipient will receive"
  shareInPercent: BigDecimal!

  "The index position of this share in the split, as defined in the contract"
  indexOfShare: BigInt!
}

type PercentSplit @entity {
  "The address of this split contract"
  id: ID!

  "The recipients and their percent share for this split"
  shares: [PercentSplitShare!]! @derivedFrom(field: "split")

  "All the NFTs currently leveraging this split"
  nfts: [Nft!]! @derivedFrom(field: "percentSplit")

  "How many different shares are in this split"
  shareCount: BigInt!

  "The date/time this split was initially created in seconds since Unix epoch"
  dateCreated: BigInt!
}

type PrivateSale @entity {
  "tx-logId"
  id: ID!

  "The NFT which was sold"
  nft: Nft!

  "The account which sold this NFT"
  seller: Account!

  "The account which bought this NFT"
  buyer: Account!

  "The total sale price"
  amountInETH: BigDecimal!

  "How much the creator earned from this sale"
  creatorRevenueInETH: BigDecimal!

  "How much Foundation earned from this sale"
  foundationRevenueInETH: BigDecimal!

  "How much the owner (if not the creator) earned from this sale"
  ownerRevenueInETH: BigDecimal!

  "The date/time this sale was completed in seconds since Unix epoch"
  dateSold: BigInt!

  "The tx hash in which this was sold"
  transactionHashSold: Bytes!

  "The deadline at which this offer was set to expire, in seconds since Unix epoch"
  deadline: BigInt!

  "True if this is the first sale on Foundation and being sold by the creator"
  isPrimarySale: Boolean!
}

type CollectionContract @entity {
  "contractAddress"
  id: ID!

  "A reference to the NftContract instance"
  nftContract: NftContract!

  "The creator account which created this collection"
  creator: Creator!

  "factoryAddress-templateVersion"
  version: String!

  "The date/time the collection was created in seconds since Unix epoch"
  dateCreated: BigInt!

  "The date/time the collection was self destructed in seconds since Unix epoch if applicable, this resets if the collection is re-created"
  dateSelfDestructed: BigInt
}

type Feth @entity {
  "userAddress"
  id: ID!
  user: Account!
  balanceInETH: BigDecimal!
  escrow: [FethEscrow!]! @derivedFrom(field: "feth")
  dateLastUpdated: BigInt!
}

type FethEscrow @entity {
  "userAddress-dateExpiry"
  id: ID!
  feth: Feth!
  amountInETH: BigDecimal!
  dateExpiry: BigInt!
  transactionHashCreated: Bytes!
  transactionHashRemoved: Bytes
  dateRemoved: BigInt
}

enum NftMarketOfferStatus {
  "This offer is applicable unless it has expired"
  Open

  "This offer has been outbid by another offer, potentially from the same buyer"
  Outbid

  "This offer has expired, this status is not reflected until another action is performed"
  Expired
  
  "This offer has been canceled"
  Canceled

  "This offer was accepted"
  Accepted

  "This offer is no longer valid due to another action such as Buy Now"
  Invalidated
}

type NftMarketOffer @entity {
  "tx-logId"
  id: ID!

  "The contract managing this offer"
  nftMarketContract: NftMarketContract!

  "The NFT this offer is for"
  nft: Nft!

  "The NFT contract for this NFT"
  nftContract: NftContract!

  "The current status of this offer"
  status: NftMarketOfferStatus!

  "The account making this offer"
  buyer: Account!

  "The seller which accepted this offer, if applicable"
  seller: Account

  "The value being offered for this NFT"
  amountInETH: BigDecimal!

  "The date/time the offer was initially created in seconds since Unix epoch"
  dateCreated: BigInt!

  "The tx hash where this offer was initially created"
  transactionHashCreated: Bytes!

  "The date/time the offer will expire in seconds since Unix epoch"
  dateExpires: BigInt!

  "The date/time the offer was canceled in seconds since Unix epoch, if applicable"
  dateCanceled: BigInt

  "The reason this offer was canceled, if known"
  canceledReason: String

  "The tx hash where this offer was canceled, if applicable"
  transactionHashCanceled: Bytes

  "The date/time the offer was accepted in seconds since Unix epoch, if applicable"
  dateAccepted: BigInt

  "The tx hash where this offer was accepted, if applicable"
  transactionHashAccepted: Bytes

  "The date/time the offer was outbid in seconds since Unix epoch, if applicable"
  dateOutbid: BigInt

  "The tx hash where this offer was outbid, if applicable"
  transactionHashOutbid: Bytes

  "The date/time the offer was invalidate in seconds since Unix epoch, if applicable"
  dateInvalidated: BigInt

  "The tx hash where this offer was outbid, if applicable"
  transactionHashInvalidated: Bytes

  "How much the creator earned from this offer, set once accepted"
  creatorRevenueInETH: BigDecimal

  "How much Foundation earned from this offer, set once accepted"
  foundationRevenueInETH: BigDecimal

  "How much the owner (if not the creator) earned from this offer, set once accepted"
  ownerRevenueInETH: BigDecimal

  "True if this is the first sale on Foundation and being sold by the creator, not known until the offer is accepted"
  isPrimarySale: Boolean

  "The offer that was outbid when this offer was placed, if applicable"
  outbidOffer: NftMarketOffer

  "The offer that outbid this offer, if applicable"
  offerOutbidBy: NftMarketOffer
}

enum NftMarketBuyNowStatus {
  "This buy now is applicable"
  Open

  "This buy now has been canceled"
  Canceled

  "This buy now was accepted"
  Accepted

  "This buy now is no longer valid due to another action such as accepted offer / kicked off auction"
  Invalidated
}

type NftMarketBuyNow @entity {
  "tx-logId"
  id: ID!

  "The contract managing this buy now"
  nftMarketContract: NftMarketContract!

  "The NFT this buy now is for"
  nft: Nft!

  "The NFT contract for this NFT"
  nftContract: NftContract!

  "The current status of this buy now"
  status: NftMarketBuyNowStatus!

  "The seller which owns the NFT."
  seller: Account!

  "The value being bought at for this NFT"
  amountInETH: BigDecimal!

  "The date/time the buy now was initially created in seconds since Unix epoch"
  dateCreated: BigInt!

  "The tx hash where this buy now was initially created"
  transactionHashCreated: Bytes!

  "The account purchasing the NFT using this buy now, if applicable"
  buyer: Account

  "The date/time the buy now was canceled in seconds since Unix epoch, if applicable"
  dateCanceled: BigInt

  "The tx hash where this buy now was canceled, if applicable"
  transactionHashCanceled: Bytes

  "The date/time the buy now was accepted in seconds since Unix epoch, if applicable"
  dateAccepted: BigInt

  "The tx hash where this buy now was accepted, if applicable"
  transactionHashAccepted: Bytes

  "The date/time the buy now was invalidate in seconds since Unix epoch, if applicable"
  dateInvalidated: BigInt

  "The tx hash where this offer was outbid, if applicable"
  transactionHashInvalidated: Bytes

  "How much the creator earned from this buy now, set once accepted"
  creatorRevenueInETH: BigDecimal

  "How much Foundation earned from this buy now, set once accepted"
  foundationRevenueInETH: BigDecimal

  "How much the owner (if not the creator) earned from this buy now, set once accepted"
  ownerRevenueInETH: BigDecimal

  "True if this is the first sale on Foundation and being sold by the creator, not known until the offer is accepted"
  isPrimarySale: Boolean
}